{"version":3,"sources":["webpack://i2/../src/components/lazy-hydrate.tsx"],"names":["lazyHydrate","root","hydrated","forceHydrate","image","loading","isLoading","isLoaded","toggleIsLoaded","ref","imgClassName","imgStyle","v","objectPosition","backgroundColor","objectFit","props","width","height","layout","images","placeholder","wrapperBackgroundColor","cacheKey","JSON","stringify","component","React","LayoutWrapper","Placeholder","getPlaceholderProps","MainImage","className","getMainProps","current","ReactDOM","render"],"mappings":"wVAgBgBA,IAedC,EACAC,EACAC,OAfEC,UACAC,YACAC,cACAC,aACAC,mBACAC,QACAC,qBACAC,sBAAW,GAAAC,EACXC,mBACAC,wBACAC,iCACGC,eAOHC,EAMEb,EANFa,MACAC,EAKEd,EALFc,OACAC,EAIEf,EAJFe,OACAC,EAGEhB,EAHFgB,OACAC,EAEEjB,EAFFiB,YACiBC,EACflB,EADFU,gBAGIS,EAAWC,KAAKC,UAAUL,GAEhCT,WACEI,YACAF,iBACAC,mBACGH,GAGL,IAAMe,EACJC,gBAACC,KAAcT,OAAQA,EAAQF,MAAOA,EAAOC,OAAQA,GACnDS,gBAACE,gBACKC,OACFT,EACAd,EACAY,EACAF,EACAC,EACAI,EACAP,EACAF,KAIJc,gBAACI,eACMf,GACLC,MAAOA,EACPC,OAAQA,EACRc,UAAWtB,IACPuB,OACF3B,EACAC,EACAa,EACAf,EACAG,EACAe,EACAd,EACAE,MA2BR,OArBIV,EAAKiC,UAGHC,cACGjC,EAASgC,UAEZhC,EAASgC,QAAUC,aAAoBlC,EAAKiC,UAI9ChC,EAASgC,QAAQE,OAAOV,MAGtBxB,EAASgC,SAAW/B,EAAa+B,QAC7BC,SACAA,WACGT,EAAWzB,EAAKiC,SACzBhC,EAASgC,aAAU,WAKjBjC,EAAKiC,UAEHC,aAEFjC,EAASgC,QAAQE,OAAO,MAExBD,SAAgB,KAAiClC,EAAKiC","file":"503-c5a2275fdcf2a88455db.js","sourcesContent":["import React, { MutableRefObject } from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { GatsbyImageProps } from \"./gatsby-image.browser\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImageProps, MainImage } from \"./main-image\"\nimport { getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { ReactElement } from \"react\"\n\ntype LazyHydrateProps = Omit<GatsbyImageProps, \"as\" | \"style\" | \"className\"> & {\n  isLoading: boolean\n  isLoaded: boolean // alwaystype SetStateAction<S> = S | ((prevState: S) => S);\n  toggleIsLoaded: (toggle: boolean) => void\n  ref: MutableRefObject<HTMLImageElement | undefined>\n}\n\nexport function lazyHydrate(\n  {\n    image,\n    loading,\n    isLoading,\n    isLoaded,\n    toggleIsLoaded,\n    ref,\n    imgClassName,\n    imgStyle = {},\n    objectPosition,\n    backgroundColor,\n    objectFit = `cover`,\n    ...props\n  }: LazyHydrateProps,\n  root: MutableRefObject<HTMLElement | undefined>,\n  hydrated: MutableRefObject<boolean>,\n  forceHydrate: MutableRefObject<boolean>\n): (() => void) | null {\n  const {\n    width,\n    height,\n    layout,\n    images,\n    placeholder,\n    backgroundColor: wrapperBackgroundColor,\n  } = image\n\n  const cacheKey = JSON.stringify(images)\n\n  imgStyle = {\n    objectFit,\n    objectPosition,\n    backgroundColor,\n    ...imgStyle,\n  }\n\n  const component = (\n    <LayoutWrapper layout={layout} width={width} height={height}>\n      <Placeholder\n        {...getPlaceholderProps(\n          placeholder,\n          isLoaded,\n          layout,\n          width,\n          height,\n          wrapperBackgroundColor,\n          objectFit,\n          objectPosition\n        )}\n      />\n\n      <MainImage\n        {...(props as Omit<MainImageProps, \"images\" | \"fallback\">)}\n        width={width}\n        height={height}\n        className={imgClassName}\n        {...getMainProps(\n          isLoading,\n          isLoaded,\n          images,\n          loading,\n          toggleIsLoaded,\n          cacheKey,\n          ref,\n          imgStyle\n        )}\n      />\n    </LayoutWrapper>\n  )\n\n  if (root.current) {\n    // Force render to mitigate \"Expected server HTML to contain a matching\" in develop\n    // @ts-ignore react 18 typings\n    if (ReactDOM.createRoot) {\n      if (!hydrated.current) {\n        // @ts-ignore react 18 typings\n        hydrated.current = ReactDOM.createRoot(root.current)\n      }\n\n      // @ts-ignore react 18 typings\n      hydrated.current.render(component)\n    } else {\n      const doRender =\n        hydrated.current || forceHydrate.current\n          ? ReactDOM.render\n          : ReactDOM.hydrate\n      doRender(component, root.current)\n      hydrated.current = true\n    }\n  }\n\n  return (): void => {\n    if (root.current) {\n      // @ts-ignore react 18 typings\n      if (ReactDOM.createRoot) {\n        // @ts-ignore react 18 typings\n        hydrated.current.render(null)\n      } else {\n        ReactDOM.render(null as unknown as ReactElement, root.current)\n      }\n    }\n  }\n}\n"],"sourceRoot":""}